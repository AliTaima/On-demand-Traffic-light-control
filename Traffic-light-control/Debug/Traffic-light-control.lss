
Traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000003a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de0  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064e  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000466  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  74:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:

uint8_t led_number = 0;
void App_init(void)
{
	//1. set direction for button pin to input
	Button_init(EXT_INT_BUTTON_PORT, EXT_INT_BUTTON_PIN);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	0e 94 92 00 	call	0x124	; 0x124 <Button_init>
	//2. Set all LED bits to output
	LED_init(LED_C_1_PORT, LED_C_1_PIN);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 96 00 	call	0x12c	; 0x12c <LED_init>
	LED_init(LED_C_2_PORT, LED_C_2_PIN);
  8c:	63 e0       	ldi	r22, 0x03	; 3
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 96 00 	call	0x12c	; 0x12c <LED_init>
	LED_init(LED_C_3_PORT, LED_C_3_PIN);
  94:	67 e0       	ldi	r22, 0x07	; 7
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 96 00 	call	0x12c	; 0x12c <LED_init>
	
	//3. Enable global interrupt(setting bit 7 in status register to 1
	sei();
  9c:	78 94       	sei
	//4. Choosing the external interrupt snese (sense on the rising edge)
	MCUCR |= (1<<0) | (1<<1);
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	85 bf       	out	0x35, r24	; 53
	//5. Enable External interrupt 0(INT0)
	GICR |= (1<<6);
  a4:	8b b7       	in	r24, 0x3b	; 59
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8b bf       	out	0x3b, r24	; 59
  aa:	08 95       	ret

000000ac <App_start>:
}
void App_start(void)
{
	while(1)
	{
		switch(led_number)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	99 f0       	breq	.+38     	; 0xda <App_start+0x2e>
  b4:	28 f0       	brcs	.+10     	; 0xc0 <App_start+0x14>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	a9 f0       	breq	.+42     	; 0xe4 <App_start+0x38>
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	c1 f0       	breq	.+48     	; 0xee <App_start+0x42>
  be:	f6 cf       	rjmp	.-20     	; 0xac <App_start>
		{
			case 0:
			LED_off(LED_C_1_PORT, LED_C_1_PIN);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 9e 00 	call	0x13c	; 0x13c <LED_off>
			LED_off(LED_C_2_PORT, LED_C_2_PIN);
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 9e 00 	call	0x13c	; 0x13c <LED_off>
			LED_off(LED_C_3_PORT, LED_C_3_PIN);
  d0:	67 e0       	ldi	r22, 0x07	; 7
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 9e 00 	call	0x13c	; 0x13c <LED_off>
			break;
  d8:	e9 cf       	rjmp	.-46     	; 0xac <App_start>
			case 1:
			LED_on(LED_C_1_PORT, LED_C_1_PIN);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 9a 00 	call	0x134	; 0x134 <LED_on>
			break;
  e2:	e4 cf       	rjmp	.-56     	; 0xac <App_start>
			case 2:
			LED_on(LED_C_2_PORT, LED_C_2_PIN);
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 9a 00 	call	0x134	; 0x134 <LED_on>
			break;
  ec:	df cf       	rjmp	.-66     	; 0xac <App_start>
			case 3:
			LED_on(LED_C_3_PORT, LED_C_3_PIN);
  ee:	67 e0       	ldi	r22, 0x07	; 7
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 9a 00 	call	0x134	; 0x134 <LED_on>
			break;
  f6:	da cf       	rjmp	.-76     	; 0xac <App_start>

000000f8 <__vector_1>:
	
	
}

ISR(EXT_INT_0)
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	if(led_number < NUMBER_OF_LEDS)
 104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	20 f4       	brcc	.+8      	; 0x114 <__vector_1+0x1c>
	{
		led_number++;
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_1+0x20>
	}
	else
	{
		led_number = 0;
 114:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <Button_init>:
#include "button.h"

//initialize
void Button_init(EN_port_t buttonPort, EN_pin_t buttonPin) // Button is an input device
{
	DIO_init(buttonPort, buttonPin, IN);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_init>
 12a:	08 95       	ret

0000012c <LED_init>:
 */ 
#include "led.h"
void LED_init(EN_port_t ledPort, EN_pin_t ledPin)
{
	//let LED as output
	DIO_init(ledPort, ledPin, OUT);
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_init>
 132:	08 95       	ret

00000134 <LED_on>:
}
void LED_on(EN_port_t ledPort, EN_pin_t ledPin)
{
	// write high on the LED
	DIO_write(ledPort, ledPin, HIGH);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	0e 94 20 01 	call	0x240	; 0x240 <DIO_write>
 13a:	08 95       	ret

0000013c <LED_off>:
}
void LED_off(EN_port_t ledPort, EN_pin_t ledPin)
{
	// write low on the LED
	DIO_write(ledPort, ledPin, LOW);
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	0e 94 20 01 	call	0x240	; 0x240 <DIO_write>
 142:	08 95       	ret

00000144 <main>:



int main(void)
{
  App_init();
 144:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
  App_start();
 148:	0e 94 56 00 	call	0xac	; 0xac <App_start>
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <DIO_init>:
 *  Author: Ali Mohamed Taima
 */ 
#include "dio.h"
void DIO_init(EN_port_t portNumber, EN_pin_t pinNumber, EN_direction_t direction)
{
	switch (portNumber)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	19 f1       	breq	.+70     	; 0x19c <DIO_init+0x4a>
 156:	30 f0       	brcs	.+12     	; 0x164 <DIO_init+0x12>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	e1 f1       	breq	.+120    	; 0x1d4 <DIO_init+0x82>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	09 f4       	brne	.+2      	; 0x162 <DIO_init+0x10>
 160:	54 c0       	rjmp	.+168    	; 0x20a <DIO_init+0xb8>
 162:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
 164:	41 11       	cpse	r20, r1
 166:	0c c0       	rjmp	.+24     	; 0x180 <DIO_init+0x2e>
			{
				CLR_PIN(DDRA, pinNumber); // input
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_init+0x22>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_init+0x1e>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
 17e:	08 95       	ret
			}
			else if (direction == OUT)
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	09 f0       	breq	.+2      	; 0x186 <DIO_init+0x34>
 184:	5c c0       	rjmp	.+184    	; 0x23e <DIO_init+0xec>
			{
				SET_PIN(DDRA, pinNumber); // output
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_init+0x40>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_init+0x3c>
 196:	82 2b       	or	r24, r18
 198:	8a bb       	out	0x1a, r24	; 26
 19a:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_B:
			if (direction == IN)
 19c:	41 11       	cpse	r20, r1
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <DIO_init+0x66>
			{
				CLR_PIN(DDRB, pinNumber); // input
 1a0:	27 b3       	in	r18, 0x17	; 23
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0x5a>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0x56>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	87 bb       	out	0x17, r24	; 23
 1b6:	08 95       	ret
			}
			else if (direction == OUT)
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <DIO_init+0x6c>
 1bc:	40 c0       	rjmp	.+128    	; 0x23e <DIO_init+0xec>
			{
				SET_PIN(DDRB, pinNumber); // output
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_init+0x78>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_init+0x74>
 1ce:	82 2b       	or	r24, r18
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_C:
			if (direction == IN)
 1d4:	41 11       	cpse	r20, r1
 1d6:	0c c0       	rjmp	.+24     	; 0x1f0 <DIO_init+0x9e>
			{
				CLR_PIN(DDRC, pinNumber); // input
 1d8:	24 b3       	in	r18, 0x14	; 20
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_init+0x92>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_init+0x8e>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
			}
			else if (direction == OUT)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	29 f5       	brne	.+74     	; 0x23e <DIO_init+0xec>
			{
				SET_PIN(DDRC, pinNumber); // output
 1f4:	24 b3       	in	r18, 0x14	; 20
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_init+0xae>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_init+0xaa>
 204:	82 2b       	or	r24, r18
 206:	84 bb       	out	0x14, r24	; 20
 208:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_D:
			if (direction == IN)
 20a:	41 11       	cpse	r20, r1
 20c:	0c c0       	rjmp	.+24     	; 0x226 <DIO_init+0xd4>
			{
				CLR_PIN(DDRD, pinNumber); // input
 20e:	21 b3       	in	r18, 0x11	; 17
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_init+0xc8>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_init+0xc4>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	81 bb       	out	0x11, r24	; 17
 224:	08 95       	ret
			}
			else if (direction == OUT)
 226:	41 30       	cpi	r20, 0x01	; 1
 228:	51 f4       	brne	.+20     	; 0x23e <DIO_init+0xec>
			{
				SET_PIN(DDRD, pinNumber); // output
 22a:	21 b3       	in	r18, 0x11	; 17
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0xe4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0xe0>
 23a:	82 2b       	or	r24, r18
 23c:	81 bb       	out	0x11, r24	; 17
 23e:	08 95       	ret

00000240 <DIO_write>:
		// error handling
	}
}
void DIO_write(EN_port_t portNumber, EN_pin_t pinNumber, EN_value_t value)
{
	switch (portNumber)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	19 f1       	breq	.+70     	; 0x28a <DIO_write+0x4a>
 244:	30 f0       	brcs	.+12     	; 0x252 <DIO_write+0x12>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	e1 f1       	breq	.+120    	; 0x2c2 <DIO_write+0x82>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	09 f4       	brne	.+2      	; 0x250 <DIO_write+0x10>
 24e:	54 c0       	rjmp	.+168    	; 0x2f8 <DIO_write+0xb8>
 250:	08 95       	ret
	{
		case PORT_A:
			if (value == LOW)
 252:	41 11       	cpse	r20, r1
 254:	0c c0       	rjmp	.+24     	; 0x26e <DIO_write+0x2e>
			{
				CLR_PIN(PORTA, pinNumber); // write 0
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write+0x22>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write+0x1e>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	8b bb       	out	0x1b, r24	; 27
 26c:	08 95       	ret
			}
			else if (value == HIGH)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	09 f0       	breq	.+2      	; 0x274 <DIO_write+0x34>
 272:	5c c0       	rjmp	.+184    	; 0x32c <DIO_write+0xec>
			{
				SET_PIN(PORTA, pinNumber); // write 1
 274:	2b b3       	in	r18, 0x1b	; 27
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_write+0x40>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_write+0x3c>
 284:	82 2b       	or	r24, r18
 286:	8b bb       	out	0x1b, r24	; 27
 288:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_B:
			if (value == LOW)
 28a:	41 11       	cpse	r20, r1
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <DIO_write+0x66>
			{
				CLR_PIN(PORTB, pinNumber); // write 0
 28e:	28 b3       	in	r18, 0x18	; 24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0x5a>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0x56>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	88 bb       	out	0x18, r24	; 24
 2a4:	08 95       	ret
			}
			else if (value == HIGH)
 2a6:	41 30       	cpi	r20, 0x01	; 1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_write+0x6c>
 2aa:	40 c0       	rjmp	.+128    	; 0x32c <DIO_write+0xec>
			{
				SET_PIN(PORTB, pinNumber); // write 1
 2ac:	28 b3       	in	r18, 0x18	; 24
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0x78>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0x74>
 2bc:	82 2b       	or	r24, r18
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_C:
			if (value == LOW)
 2c2:	41 11       	cpse	r20, r1
 2c4:	0c c0       	rjmp	.+24     	; 0x2de <DIO_write+0x9e>
			{
				CLR_PIN(PORTC, pinNumber); // write 0
 2c6:	25 b3       	in	r18, 0x15	; 21
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write+0x92>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write+0x8e>
 2d6:	80 95       	com	r24
 2d8:	82 23       	and	r24, r18
 2da:	85 bb       	out	0x15, r24	; 21
 2dc:	08 95       	ret
			}
			else if (value == HIGH)
 2de:	41 30       	cpi	r20, 0x01	; 1
 2e0:	29 f5       	brne	.+74     	; 0x32c <DIO_write+0xec>
			{
				SET_PIN(PORTC, pinNumber); // write 1
 2e2:	25 b3       	in	r18, 0x15	; 21
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_write+0xae>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_write+0xaa>
 2f2:	82 2b       	or	r24, r18
 2f4:	85 bb       	out	0x15, r24	; 21
 2f6:	08 95       	ret
			{
				// error handling
			}
			break;
		case PORT_D:
			if (value == LOW)
 2f8:	41 11       	cpse	r20, r1
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <DIO_write+0xd4>
			{
				CLR_PIN(PORTD, pinNumber); // write 0
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write+0xc8>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write+0xc4>
 30c:	80 95       	com	r24
 30e:	82 23       	and	r24, r18
 310:	82 bb       	out	0x12, r24	; 18
 312:	08 95       	ret
			}
			else if (value == HIGH)
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	51 f4       	brne	.+20     	; 0x32c <DIO_write+0xec>
			{
				SET_PIN(PORTD, pinNumber); // write 1
 318:	22 b3       	in	r18, 0x12	; 18
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_write+0xe4>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_write+0xe0>
 328:	82 2b       	or	r24, r18
 32a:	82 bb       	out	0x12, r24	; 18
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
