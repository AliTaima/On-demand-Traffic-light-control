
Traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000041c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b32  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dc  00000000  00000000  00001042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b2  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fc  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  74:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
	
	
}

ISR(EXT_INT_0)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	if(led_number < NUMBER_OF_LEDS)
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	20 f4       	brcc	.+8      	; 0x98 <__vector_1+0x1c>
	{
		led_number++;
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	02 c0       	rjmp	.+4      	; 0x9c <__vector_1+0x20>
	}
	else
	{
		led_number = 0;
  98:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <DIO_init>:
		break;
	case PORT_C:
		TOGGLE_PIN(PORTC, pinNumber);
		break;
	case PORT_D:
		TOGGLE_PIN(PORTD, pinNumber);
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	19 f1       	breq	.+70     	; 0xf2 <DIO_init+0x4a>
  ac:	30 f0       	brcs	.+12     	; 0xba <DIO_init+0x12>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	e1 f1       	breq	.+120    	; 0x12a <DIO_init+0x82>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_init+0x10>
  b6:	54 c0       	rjmp	.+168    	; 0x160 <DIO_init+0xb8>
  b8:	08 95       	ret
  ba:	41 11       	cpse	r20, r1
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <DIO_init+0x2e>
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_init+0x22>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_init+0x1e>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_init+0x34>
  da:	5c c0       	rjmp	.+184    	; 0x194 <DIO_init+0xec>
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_init+0x40>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_init+0x3c>
  ec:	82 2b       	or	r24, r18
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	08 95       	ret
  f2:	41 11       	cpse	r20, r1
  f4:	0c c0       	rjmp	.+24     	; 0x10e <DIO_init+0x66>
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_init+0x5a>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_init+0x56>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <DIO_init+0x6c>
 112:	40 c0       	rjmp	.+128    	; 0x194 <DIO_init+0xec>
 114:	27 b3       	in	r18, 0x17	; 23
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_init+0x78>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_init+0x74>
 124:	82 2b       	or	r24, r18
 126:	87 bb       	out	0x17, r24	; 23
 128:	08 95       	ret
 12a:	41 11       	cpse	r20, r1
 12c:	0c c0       	rjmp	.+24     	; 0x146 <DIO_init+0x9e>
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_init+0x92>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_init+0x8e>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	29 f5       	brne	.+74     	; 0x194 <DIO_init+0xec>
 14a:	24 b3       	in	r18, 0x14	; 20
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_init+0xae>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_init+0xaa>
 15a:	82 2b       	or	r24, r18
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	08 95       	ret
 160:	41 11       	cpse	r20, r1
 162:	0c c0       	rjmp	.+24     	; 0x17c <DIO_init+0xd4>
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_init+0xc8>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_init+0xc4>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	08 95       	ret
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	51 f4       	brne	.+20     	; 0x194 <DIO_init+0xec>
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_init+0xe4>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_init+0xe0>
 190:	82 2b       	or	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_write>:
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	19 f1       	breq	.+70     	; 0x1e0 <DIO_write+0x4a>
 19a:	30 f0       	brcs	.+12     	; 0x1a8 <DIO_write+0x12>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	e1 f1       	breq	.+120    	; 0x218 <DIO_write+0x82>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <DIO_write+0x10>
 1a4:	54 c0       	rjmp	.+168    	; 0x24e <DIO_write+0xb8>
 1a6:	08 95       	ret
 1a8:	41 11       	cpse	r20, r1
 1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <DIO_write+0x2e>
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_write+0x22>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_write+0x1e>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_write+0x34>
 1c8:	5c c0       	rjmp	.+184    	; 0x282 <DIO_write+0xec>
 1ca:	2b b3       	in	r18, 0x1b	; 27
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_write+0x40>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_write+0x3c>
 1da:	82 2b       	or	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
 1e0:	41 11       	cpse	r20, r1
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <DIO_write+0x66>
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x5a>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x56>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	08 95       	ret
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_write+0x6c>
 200:	40 c0       	rjmp	.+128    	; 0x282 <DIO_write+0xec>
 202:	28 b3       	in	r18, 0x18	; 24
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_write+0x78>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_write+0x74>
 212:	82 2b       	or	r24, r18
 214:	88 bb       	out	0x18, r24	; 24
 216:	08 95       	ret
 218:	41 11       	cpse	r20, r1
 21a:	0c c0       	rjmp	.+24     	; 0x234 <DIO_write+0x9e>
 21c:	25 b3       	in	r18, 0x15	; 21
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_write+0x92>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_write+0x8e>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	85 bb       	out	0x15, r24	; 21
 232:	08 95       	ret
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	29 f5       	brne	.+74     	; 0x282 <DIO_write+0xec>
 238:	25 b3       	in	r18, 0x15	; 21
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write+0xae>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write+0xaa>
 248:	82 2b       	or	r24, r18
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	08 95       	ret
 24e:	41 11       	cpse	r20, r1
 250:	0c c0       	rjmp	.+24     	; 0x26a <DIO_write+0xd4>
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_write+0xc8>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_write+0xc4>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	51 f4       	brne	.+20     	; 0x282 <DIO_write+0xec>
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xe4>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xe0>
 27e:	82 2b       	or	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <DIO_read>:
		pinNumber --> PIN0, PIN1, PIN2, PIN3, PIN4, PIN5, PIN6, PIN7
		*value --> pointer store the status on the variable that it point to
		--------------------its task--------------------------------
		This function read the state of pinNumber and store it in *value pointer
	*/
	switch (portNumber)
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	e9 f0       	breq	.+58     	; 0x2c2 <DIO_read+0x3e>
 288:	30 f0       	brcs	.+12     	; 0x296 <DIO_read+0x12>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	81 f1       	breq	.+96     	; 0x2ee <DIO_read+0x6a>
 28e:	83 30       	cpi	r24, 0x03	; 3
 290:	09 f4       	brne	.+2      	; 0x294 <DIO_read+0x10>
 292:	43 c0       	rjmp	.+134    	; 0x31a <DIO_read+0x96>
 294:	08 95       	ret
	{
	case PORT_A:
		GET_STATE(*value, PINA, pinNumber); // get state --> read bit
 296:	79 b3       	in	r23, 0x19	; 25
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9c 01       	movw	r18, r24
 29e:	06 2e       	mov	r0, r22
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_read+0x22>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_read+0x1e>
 2aa:	87 2f       	mov	r24, r23
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	82 23       	and	r24, r18
 2b0:	93 23       	and	r25, r19
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_read+0x34>
 2b4:	95 95       	asr	r25
 2b6:	87 95       	ror	r24
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_read+0x30>
 2bc:	fa 01       	movw	r30, r20
 2be:	80 83       	st	Z, r24
		break;
 2c0:	08 95       	ret
	case PORT_B:
		GET_STATE(*value, PINB, pinNumber); // get state --> read bit
 2c2:	76 b3       	in	r23, 0x16	; 22
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	9c 01       	movw	r18, r24
 2ca:	06 2e       	mov	r0, r22
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_read+0x4e>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_read+0x4a>
 2d6:	87 2f       	mov	r24, r23
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	82 23       	and	r24, r18
 2dc:	93 23       	and	r25, r19
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_read+0x60>
 2e0:	95 95       	asr	r25
 2e2:	87 95       	ror	r24
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_read+0x5c>
 2e8:	fa 01       	movw	r30, r20
 2ea:	80 83       	st	Z, r24
		break;
 2ec:	08 95       	ret
	case PORT_C:
		GET_STATE(*value, PINC, pinNumber); // get state --> read bit
 2ee:	73 b3       	in	r23, 0x13	; 19
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9c 01       	movw	r18, r24
 2f6:	06 2e       	mov	r0, r22
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_read+0x7a>
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_read+0x76>
 302:	87 2f       	mov	r24, r23
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	82 23       	and	r24, r18
 308:	93 23       	and	r25, r19
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_read+0x8c>
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_read+0x88>
 314:	fa 01       	movw	r30, r20
 316:	80 83       	st	Z, r24
		break;
 318:	08 95       	ret
	case PORT_D:
		GET_STATE(*value, PIND, pinNumber); // get state --> read bit
 31a:	70 b3       	in	r23, 0x10	; 16
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	9c 01       	movw	r18, r24
 322:	06 2e       	mov	r0, r22
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_read+0xa6>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_read+0xa2>
 32e:	87 2f       	mov	r24, r23
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	82 23       	and	r24, r18
 334:	93 23       	and	r25, r19
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_read+0xb8>
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_read+0xb4>
 340:	fa 01       	movw	r30, r20
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <main>:
 * Created: 9/14/2022 6:43:08 PM
 *  Author: Ali Mohamed Taima
 */ 
#include "dio.h"
int main(void)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	1f 92       	push	r1
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		DIO_init(PORT_A, PIN0, OUT);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
		DIO_init(PORT_A, PIN1, IN);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
		DIO_init(PORT_A, PIN2, OUT);
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
		DIO_write(PORT_A, PIN0, HIGH);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_write>
		DIO_write(PORT_A, PIN2, LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_write>
		uint8_t value = 0;
 382:	19 82       	std	Y+1, r1	; 0x01
		DIO_read(PORT_A, PIN1, &value);
 384:	ae 01       	movw	r20, r28
 386:	4f 5f       	subi	r20, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 42 01 	call	0x284	; 0x284 <DIO_read>
		if(value)
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	88 23       	and	r24, r24
 396:	e1 f2       	breq	.-72     	; 0x350 <main+0xa>
		{
			DIO_write(PORT_A, PIN2, HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	62 e0       	ldi	r22, 0x02	; 2
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_write>

		}
	}
 3a2:	d6 cf       	rjmp	.-84     	; 0x350 <main+0xa>

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
